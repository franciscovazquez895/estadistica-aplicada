---
title: "Distribución Geométrica"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(kableExtra)
library(gridExtra)
```

La **distribución geométrica** modela el número de ensayos independientes de Bernoulli necesarios antes de obtener el primer éxito. Es fundamental para analizar tiempos de espera y procesos que involucran la búsqueda del primer evento exitoso.

:::::::: {#def-geometrica}
Una variable aleatoria $X$ sigue una distribución geométrica si representa el número de ensayos necesarios antes de obtener el primer éxito en una secuencia de ensayos independientes de Bernoulli. Si la probabilidad de éxito en cada ensayo es $p$, entonces la función de masa de probabilidad (pmf) está dada por:

$$f(x)= p(1-p)^x \quad \text{para } x =0,  1, 2, 3, \ldots$$

Una variable aleatoria $X$ que tiene distribución geométrica será denotada como $X \sim \text{geo}(p)$.

:::

## Características de la Distribución Geométrica

**Parámetros**

-   $p$: probabilidad de éxito en cada ensayo, donde $0 < p \leq 1$

**Función de Distribución**

\begin{equation}
F(x) = \sum_{u\leq x} f(u) = \begin{cases}
0 & \text{si } x < 0 \\
1-(1-p)^{k+1} & \text{si } k \leq x \leq k+1; \quad k=0,1, \dots 
\end{cases}
\end{equation}

**Parámetros Estadísticos**

Esperanza (Media): $$E(X) = \frac{1-p}{p}$$

Varianza: $$\text{Var}(X) = \frac{1-p}{p^2}$$

Desviación Estándar: $$\sigma = \sqrt{\frac{1-p}{p^2}} = \frac{\sqrt{1-p}}{p}$$

## Ejemplo Básico

::: {#exm-geom_1}
Lanzamiento de monedas - Búsqueda de la primera cara. Consideramos una moneda justa ($p=0.5$), y queremos modelar el número de lanzamientos hasta antes de obtener la primera cara.

```{r}
#| label: moneda-geometrica
# Parámetro
p_cara <- 0.5

# Calcular probabilidades para los primeros 11 ensayos
k_moneda <- 0:10
prob_geometrica <- dgeom(k_moneda , p_cara)  

# Crear tabla
geometrica_moneda <- data.frame(
  Ensayo = k_moneda,
  Probabilidad = prob_geometrica,
  Prob_Acumulada = pgeom(k_moneda, p_cara)
)

kable(geometrica_moneda, 
      caption = "Distribución Geométrica - Primera cara (p = 0.5)",
      digits = 4,
      col.names = c("Ensayo", "P(X = x)", "P(X ≤ x)")) %>%
  kable_styling(bootstrap_options = "striped")

# Parámetros estadísticos
media_moneda <- (1-p_cara) / p_cara
varianza_moneda <- (1 - p_cara) / (p_cara^2)
desv_std_moneda <- sqrt(varianza_moneda)


cat("Media (ensayos esperados):", media_moneda, "\n")
cat("Varianza:", varianza_moneda, "\n")
cat("Desviación estándar:", round(desv_std_moneda, 4), "\n")

```

**Visualización**

```{r}
#| label: grafico-geometrica-basico
#| fig-cap: "Distribución Geométrica - Primera cara en lanzamiento de moneda"
ggplot(geometrica_moneda, aes(x = Ensayo, y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5, size = 3) +
  geom_vline(xintercept = media_moneda, color = "red", linetype = "dashed", linewidth = 1) +
  annotate("text", x = media_moneda + 1.5, y = max(prob_geometrica) * 0.8, 
           label = paste("E[X] =", media_moneda), color = "red") +
  scale_x_continuous(breaks = k_moneda) +
  labs(title = paste("Distribución Geométrica(", p_cara, ")"),
       subtitle = "Número de lanzamientos antes de obtener la primera cara",
       x = "Número de Ensayos",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Comparación: Efecto del parámetro

A continuación exploramos cómo varía la distribución geométrica al cambiar el parámetro $p$.

```{r}
#| label: diferentes-p
# Diferentes probabilidades de éxito
p_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
k_max <- 15

# Crear data frame para comparación
geometrica_comp <- data.frame()
for(p in p_values) {
  k_vals <- 0:k_max
  probs <- dgeom(k_vals, p)  
  
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_vals,
    probabilidad = probs,
    media = (1-p)/p,
    varianza = (1-p)/(p^2)
  )
  geometrica_comp <- rbind(geometrica_comp, temp_data)
}

# Tabla de parámetros
parametros_comp <- data.frame(
  p = p_values,
  Media = (1-p_values)/p_values,
  Varianza = (1-p_values)/(p_values^2),
  Desv_Std = sqrt((1-p_values)/(p_values^2))
)

kable(parametros_comp, 
      caption = "Parámetros de la distribución geométrica para diferentes valores de p",
      digits = 4,
      col.names = c("p", "Media", "Varianza", "Desv. Std")) |> 
  kable_styling(bootstrap_options = "striped")
```

```{r}
#| label: grafico-diferentes-p
#| fig-cap: "Distribución Geométrica para diferentes valores de p"
# Filtrar para mejor visualización
geometrica_filtered <- geometrica_comp[geometrica_comp$probabilidad > 0.005, ]

ggplot(geometrica_filtered, aes(x = k, y = probabilidad, color = p_label)) +
  geom_line(linewidth = 1, alpha = 0.8) +
  geom_point(size = 2) +
  facet_wrap(~p_label, scales = "free") +
  labs(title = "Distribución Geométrica para diferentes valores de p",
       x = "Número de Ensayos",
       y = "Probabilidad",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "none")
```

## Propiedades Importantes

### Propiedad de Pérdida de Memoria

Sea $X\sim geo(p)$ Entonces para cualesquiera enteros $s, t \geq 0$ se cumple la propiedad de pérdida de memoria:

$$P(X \geq s + t | X \geq s) = P(X \geq t)$$

**Verificación Numérica**

Consideremos una variable aleatoria geométrica con $p=0.3$, y verifiquemos la propiedad para $s=5$ y $t=3$.

```{r}
#| label: falta-memoria
# Demostración de la propiedad de falta de memoria
p_mem <- 0.3
s <- 5
t <- 3

# P(X >= s + t)
prob_s_t <- 1 - pgeom(s + t-1, p_mem)  

# P(X >= s) 
prob_s <- 1- pgeom(s-1, p_mem)

# P(X >= t) 
prob_t <- 1- pgeom(t-1, p_mem)

# P(X >= s + t | X >= s) = P(X >= s + t) / P(X >= s)
prob_condicional <- prob_s_t / prob_s

cat("Demostración de la Propiedad de Falta de Memoria:\n")
cat("Parámetros: p =", p_mem, ", s =", s, ", t =", t, "\n\n")
cat("P(X  ≥", s+t, ") =", round(prob_s_t, 6), "\n")
cat("P(X  ≥", s, ") =", round(prob_s, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("P(X  ≥", s+t, "| X  ≥", s, ") =", round(prob_condicional, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("¿Son iguales?", abs(prob_condicional - prob_t) < 1e-10, "\n")
```

### Función de Supervivencia

La función de supervivencia $S(k)$ representa la probabilidad de que el número de fracasos antes de obtener el primer éxito sea mayor que $k$:

$$S(k) = P(X > k) = (1-p)^{(k+1)}$$

**Visualización de la Función de Supervivencia**

```{r}
#| label: funcion-supervivencia
#| fig-cap: "Función de Supervivencia de la distribución geométrica"
# Diferentes valores de p
p_surv <- c(0.2, 0.4, 0.6, 0.8)
k_surv <- 0:15

# Crear data frame
supervivencia_data <- data.frame()
for(p in p_surv) {
  surv_vals <- (1 - p)^(k_surv+1)
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_surv,
    supervivencia = surv_vals
  )
  supervivencia_data <- rbind(supervivencia_data, temp_data)
}

ggplot(supervivencia_data, aes(x = k, y = supervivencia, color = p_label)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(title = "Función de Supervivencia: P(X > k)",
       x = "k (número de ensayos antes del primer éxito)",
       y = "Probabilidad de Supervivencia",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
```

## Ejemplos Aplicados

::: {#exm-geom_calidad}
**Control de Calidad Industrial**

Una máquina produce piezas defectuosas con probabilidad 0.05. ¿Cuántas piezas debemos inspeccionar antes encontrar la primera defectuosa?

```{r}
#| label: control-calidad-geometrica
# Parámetros
p_defecto_geom <- 0.05

# Parámetros estadísticos
media_defecto <- (1-p_defecto_geom) / p_defecto_geom
varianza_defecto <- (1 - p_defecto_geom) / (p_defecto_geom^2)
desv_std_defecto <- sqrt(varianza_defecto)

cat("Control de Calidad - Primera pieza defectuosa:\n")
cat("Probabilidad de defecto por pieza:", p_defecto_geom, "\n")
cat("Número esperado de inspecciones:", media_defecto, "\n")
cat("Desviación estándar:", round(desv_std_defecto, 2), "\n\n")

# Probabilidades específicas
k_calidad <- 0:50
prob_calidad <- dgeom(k_calidad, p_defecto_geom)

# Preguntas de interés
prob_primera_10 <- sum(prob_calidad[1:10])
prob_mas_20 <- 1 - sum(prob_calidad[1:20])
prob_entre_10_30 <- sum(prob_calidad[10:30])

cat("Probabilidades de interés:\n")
cat("P(primera defectuosa en ≤ 10 inspecciones):", round(prob_primera_10, 4), "\n")
cat("P(primera defectuosa en > 20 inspecciones):", round(prob_mas_20, 4), "\n")
cat("P(primera defectuosa entre 10 y 30 inspecciones):", round(prob_entre_10_30, 4), "\n")



# Visualización
calidad_data <- data.frame(
  k = k_calidad[1:40],
  probabilidad = prob_calidad[1:40]
)

ggplot(calidad_data, aes(x = k, y = probabilidad)) +
  geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_defecto, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_defecto + 5, y = max(prob_calidad) * 0.8, 
           label = paste("E(X) =", media_defecto), color = "red") +
  labs(title = "Control de Calidad: Primera Pieza Defectuosa",
       subtitle = paste("Geométrica(", p_defecto_geom, ")"),
       x = "Número de Inspecciones",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Simulación: Validación de propiedades teóricas

```{r}
#| label: simulacion-geometrica
set.seed(123)
p_sim <- 0.25
n_sim <- 10000

# Generar datos geométricos 
datos_geom <- rgeom(n_sim, p_sim) 

# Estadísticas observadas
media_obs <- mean(datos_geom)
var_obs <- var(datos_geom)
desv_obs <- sd(datos_geom)

# Valores teóricos
media_teo <- (1-p_sim) / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", media_teo, "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", var_teo, "| Varianza observada:", round(var_obs, 4), "\n")
cat("Desv. Std teórica:", round(desv_teo, 4), "| Desv. Std observada:", round(desv_obs, 4), "\n")

# Comparar distribuciones
freq_obs <- table(datos_geom[datos_geom <= 20]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp, p_sim)

comparacion_sim <- data.frame(
  k = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

kable(head(comparacion_sim, 12), 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas",
      digits = 4,
      col.names = c("k", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```

## Ejercicios Propuestos

::: {#exr-geom_1}
Se lanza una moneda hasta obtener la primera cara.

-   
```{r}
#| label: exr-geom_1-solucion
#| code-fold: true

p1 <- 0.5 

cat("--- Resultados Ejercicio 1: Moneda ---\n")

# a) P(X=5 lanzamientos) -> P(4 fallos antes del 1er éxito)
# dgeom(k, p) donde k es el número de fallos (k=x-1)
prob_a1 <- dgeom(x = 4, prob = p1)
cat("a) P(5 lanzamientos):", round(prob_a1, 4), "\n")

# b) P(X > 3 lanzamientos) = 1 - P(X <= 3) 
# P(X <= 3) = P(0, 1, o 2 fallos) -> pgeom(q=2)
prob_b1 <- 1 - pgeom(q = 2, prob = p1) 
cat("b) P(> 3 lanzamientos):", round(prob_b1, 4), "\n")

# c) Media E(X) = 1/p, Varianza Var(X) = (1-p)/p^2
media1 <- 1/p1
varianza1 <- (1 - p1) / (p1^2)
cat("c) Media E(X):", media1, "\n")
cat("c) Varianza Var(X):", varianza1, "\n")
```

    a)  ¿Cuál es la probabilidad de necesitar exactamente 5 lanzamientos?

-   

    b)  ¿Cuál es la probabilidad de necesitar más de 3 lanzamientos?

-   

    c)  Calcule la media y varianza del número de lanzamientos.
:::

::: {#exr-geom_2}
Un jugador de básquetbol tiene 70% de probabilidad de anotar un tiro libre.

-   
```{r}
#| label: exr-geom_2-solucion
#| code-fold: true

p2 <- 0.7

cat("--- Resultados Ejercicio 2: Baloncesto ---\n")

# a) P(X=3 intentos) -> P(2 fallos antes del 1er éxito)
prob_a2 <- dgeom(x = 2, prob = p2)
cat("a) P(3 intentos):", round(prob_a2, 4), "\n")

# b) Número esperado de intentos E(X) = 1/p
esperanza2 <- 1/p2
cat("b) Intentos esperados E(X):", round(esperanza2, 4), "\n")

# c) P(2 <= X <= 5 intentos) = P(X <= 5) - P(X <= 1)
# P(X <= 5) = P(0, 1, 2, 3, 4 fallos) -> pgeom(q=4)
# P(X <= 1) = P(0 fallos) -> pgeom(q=0)
prob_c2 <- pgeom(q = 4, prob = p2) - pgeom(q = 0, prob = p2)
cat("c) P(2 <= X <= 5 intentos):", round(prob_c2, 4), "\n")
```

    a)  ¿Cuál es la probabilidad de que anote en el tercer intento por primera vez?

-   

    b)  ¿Cuántos intentos se espera que necesite para anotar?

-   

    c)  ¿Cuál es la probabilidad de necesitar entre 2 y 5 intentos?
:::

::: {#exr-geom_3}
Una máquina tiene probabilidad 0.02 de producir una pieza defectuosa.

-   
```{r}
#| label: exr-geom_3-solucion
#| code-fold: true

p3 <- 0.02

cat("--- Resultados Ejercicio 3: Máquina Defectuosa ---\n")

# a) Número esperado de inspecciones E(X) = 1/p
esperanza3 <- 1/p3
cat("a) Número esperado de inspecciones E(X):", esperanza3, "\n")

# b) P(X > 100) = 1 - P(X <= 100)
# P(X > 100) = P(100 o más fallos)
prob_b3 <- 1 - pgeom(q = 99, prob = p3)
cat("b) P(X > 100 inspecciones):", round(prob_b3, 4), "\n")

# c) Demostración de Falta de Memoria: P(X > k+j | X > k) = P(X > j)
# Se demuestra usando la fórmula P(X > k) = (1-p)^k
k_c <- 10
j_c <- 100
prob_k_j <- (1 - p3)^(k_c + j_c) / (1 - p3)^k_c
prob_j <- (1 - p3)^j_c

cat("c) Propiedad de Falta de Memoria (P(X > 110 | X > 10) = P(X > 100)):\n")
cat("   P(X > 110 | X > 10):", round(prob_k_j, 4), "\n")
cat("   P(X > 100):", round(prob_j, 4), "\n")
```

    a)  Si se inspeccionan las piezas hasta encontrar la primera defectuosa, ¿cuál es el número esperado de inspecciones?

-   

    b)  ¿Cuál es la probabilidad de que la primera pieza defectuosa aparezca después de la pieza número 100?

-   

    c)  Demuestre la propiedad de falta de memoria para este problema.
:::
::::::::
